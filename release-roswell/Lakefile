#|-*- mode:lisp -*-|#
(in-package :cl-user)
(ql:quickload '(:dexador :lake :cl-syntax :roswell.github.utils) :silent t)
(defpackage :lake.user
  (:use :cl :lake :cl-syntax :roswell.github.utils)
  (:shadowing-import-from :lake
                          :directory))
(in-package :lake.user)

(use-syntax :interpol)

(roswell:include "util-install-quicklisp")

(defvar *success* t)
(defun appveyor (tag)
  (let* ((path (ensure-directories-exist (merge-pathnames "appveyor/")))
        (uri "https://ci.appveyor.com/api/projects/snmsts/roswell-en89n/artifacts")
        (amd64 (merge-pathnames (format nil "roswell_~A_amd64.zip" (subseq tag 1)) path))
        (i686 (merge-pathnames (format nil "roswell_~A_i686.zip"  (subseq tag 1)) path)))
    (every
     #'identity
     (list
      (ignore-errors
        (dex:fetch (format nil "~A/Roswell-x86_64.zip?tag=~A&~A"
                           uri tag
                           "job=Environment%3A%20MSYS2_ARCH%3Dx86_64,%20MSYS2_BITS%3D64,%20MSYSTEM%3DMINGW64,%20METHOD%3Dcross")
                   amd64)
        (when (ros:getenv "GITHUB_OAUTH_TOKEN")
          (github amd64 tag "roswell" "roswell"))
        t)
      (ignore-errors
        (dex:fetch (format nil "~A/Roswell-i686.zip?tag=~A&~A"
                           uri tag
                           "job=Environment%3A%20MSYS2_ARCH%3Di686,%20MSYS2_BITS%3D32,%20MSYSTEM%3DMINGW32,%20METHOD%3Dcross")
                   i686)
        (when (ros:getenv "GITHUB_OAUTH_TOKEN")
          (github i686 tag "roswell" "roswell"))
        t)))))

(defun fetch-upstream (tag output)
  (let ((path (merge-pathnames (format nil "~A.tar.gz" (subseq tag 1)) output)))
    (roswell.util:download (format nil "https://github.com/roswell/roswell/archive/~A.tar.gz" tag) path)
    path))

(defun rename-upstream (path package-name output)
  (print (list :rename-upstream path package-name output))
  (let* ((name (pathname-name path))
         (version (pathname-name name))
         (new (make-pathname :name (format nil "~A_~A.orig.tar" package-name
                                           version)
                             :defaults output)))
    (print (list :new new))
    (uiop/os:chdir output)
    (uiop/run-program:run-program (format nil "tar xf ~A" (namestring path)))
    (rename-file path new)
    new))

(defun cp-debian (output)
  (namestring
   (first
    (remove-if-not 
     #'(lambda (x)
         (and (not (pathname-name x))
              (string-equal "roswell" 
                            (first (last (pathname-directory x)))
                            :end2 (min 7 (length (first (last 
                                                         (pathname-directory x))))))))
     (cl:directory (merge-pathnames "*.*" output))))))

(defun dpkg-buildpackage (path)
  (uiop/os:chdir path)
  (uiop/run-program:run-program "dpkg-buildpackage -us -uc" :output :interactive))

(defun debian (tag)
  (let ((output (ensure-directories-exist (merge-pathnames "archive/")))
        (version (subseq tag 1)))
    (setf (uiop:getenv "DEB_CFLAGS_SET") "-O3")
    (fetch-upstream tag output)
    (uiop:run-program (format nil "cd ~A;tar xf archive/~A.tar.gz"
                              (namestring *default-pathname-defaults*)
                              version))
    (uiop:run-program (format nil "cd ~A;cp roswell-~A/ChangeLog roswell-~A/debian/changelog"
                              (namestring *default-pathname-defaults*) version version))
    (uiop:run-program  (format nil "cd ~A;cp archive/~A.tar.gz roswell_~A.orig.tar.gz"
                               (namestring *default-pathname-defaults*) version version))
    (uiop:run-program (format nil "cd ~A;cd roswell-~A;dpkg-buildpackage -us -uc"
                              (namestring *default-pathname-defaults*) version))
    (when (ros:getenv "GITHUB_OAUTH_TOKEN")
      (dolist (file (cl:directory (merge-pathnames "roswell_*.*" (namestring *default-pathname-defaults*))))
        (github file tag "roswell" "roswell")))))

(task "default" ()
  (let ((version (or (unless (zerop (length (ros:getenv "ROSWELL_TAG")))
                       (ros:getenv "ROSWELL_TAG"))
                     (third (roswell.install:github-version
                             "https://github.com/roswell/roswell/releases.atom"
                             "roswell"
                             (lambda (href) (subseq href (1+ (position #\/ href :from-end t)))))))))
    (unless (ros:getenv "RELEASE_ROSWELL_SKIP_APPVEYOR")
      (appveyor version)
      #+nil(setf *success* (ignore-errors
                             (and  *success*))))
    (unless (ros:getenv "RELEASE_ROSWELL_SKIP_DEBIAN")
      (debian version)
      #+nil(setf *success* (ignore-errors
                        (and (debian version) *success*))))

    (unless *success*
      (error "err"))))

(task "clean" ()
  (uiop:delete-directory-tree (merge-pathnames "appveyor/")
                              :validate t
                              :if-does-not-exist :ignore)
  (dolist (j '("roswell-*/"
               "archive/"))
    (dolist (i (cl:directory j))
      (uiop:delete-directory-tree i :validate t)))
  (dolist (j '("roswell-dbgsym*.*"
               "roswell_*.*"))
    (dolist (i (cl:directory j))
      (uiop/common-lisp:delete-file i))))
